'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.34014
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="SPGData")>  _
Partial Public Class SPGDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InserttblInventory(instance As tblInventory)
    End Sub
  Partial Private Sub UpdatetblInventory(instance As tblInventory)
    End Sub
  Partial Private Sub DeletetblInventory(instance As tblInventory)
    End Sub
  Partial Private Sub InserttblItem(instance As tblItem)
    End Sub
  Partial Private Sub UpdatetblItem(instance As tblItem)
    End Sub
  Partial Private Sub DeletetblItem(instance As tblItem)
    End Sub
  Partial Private Sub InserttblBOM(instance As tblBOM)
    End Sub
  Partial Private Sub UpdatetblBOM(instance As tblBOM)
    End Sub
  Partial Private Sub DeletetblBOM(instance As tblBOM)
    End Sub
  Partial Private Sub InsertLocationInventory(instance As LocationInventory)
    End Sub
  Partial Private Sub UpdateLocationInventory(instance As LocationInventory)
    End Sub
  Partial Private Sub DeleteLocationInventory(instance As LocationInventory)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.DXDAL.My.MySettings.Default.SPGDataConnectionString1, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property tblInventories() As System.Data.Linq.Table(Of tblInventory)
		Get
			Return Me.GetTable(Of tblInventory)
		End Get
	End Property
	
	Public ReadOnly Property tblItems() As System.Data.Linq.Table(Of tblItem)
		Get
			Return Me.GetTable(Of tblItem)
		End Get
	End Property
	
	Public ReadOnly Property tblBOMs() As System.Data.Linq.Table(Of tblBOM)
		Get
			Return Me.GetTable(Of tblBOM)
		End Get
	End Property
	
	Public ReadOnly Property LocationInventories() As System.Data.Linq.Table(Of LocationInventory)
		Get
			Return Me.GetTable(Of LocationInventory)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblInventory")>  _
Partial Public Class tblInventory
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _InventoryID As Integer
	
	Private _InventoryDate As System.Nullable(Of Date)
	
	Private _InventoryItemID As System.Nullable(Of Integer)
	
	Private _InventoryQuantity As System.Nullable(Of Integer)
	
	Private _InventoryPallets As System.Nullable(Of Single)
	
	Private _strEnteredBy As String
	
	Private _dtmEnteredOn As System.Nullable(Of Date)
	
	Private _ts As System.Data.Linq.Binary
	
	Private _PO As String
	
	Private _Lot As String
	
	Private _Shift As System.Nullable(Of Integer)
	
	Private _Pallet As System.Nullable(Of Integer)
	
	Private _tblItem As EntityRef(Of tblItem)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnInventoryIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnInventoryIDChanged()
    End Sub
    Partial Private Sub OnInventoryDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnInventoryDateChanged()
    End Sub
    Partial Private Sub OnInventoryItemIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnInventoryItemIDChanged()
    End Sub
    Partial Private Sub OnInventoryQuantityChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnInventoryQuantityChanged()
    End Sub
    Partial Private Sub OnInventoryPalletsChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub OnInventoryPalletsChanged()
    End Sub
    Partial Private Sub OnstrEnteredByChanging(value As String)
    End Sub
    Partial Private Sub OnstrEnteredByChanged()
    End Sub
    Partial Private Sub OndtmEnteredOnChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OndtmEnteredOnChanged()
    End Sub
    Partial Private Sub OntsChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OntsChanged()
    End Sub
    Partial Private Sub OnPOChanging(value As String)
    End Sub
    Partial Private Sub OnPOChanged()
    End Sub
    Partial Private Sub OnLotChanging(value As String)
    End Sub
    Partial Private Sub OnLotChanged()
    End Sub
    Partial Private Sub OnShiftChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnShiftChanged()
    End Sub
    Partial Private Sub OnPalletChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnPalletChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._tblItem = CType(Nothing, EntityRef(Of tblItem))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InventoryID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property InventoryID() As Integer
		Get
			Return Me._InventoryID
		End Get
		Set
			If ((Me._InventoryID = value)  _
						= false) Then
				Me.OnInventoryIDChanging(value)
				Me.SendPropertyChanging
				Me._InventoryID = value
				Me.SendPropertyChanged("InventoryID")
				Me.OnInventoryIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InventoryDate", DbType:="DateTime", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property InventoryDate() As System.Nullable(Of Date)
		Get
			Return Me._InventoryDate
		End Get
		Set
			If (Me._InventoryDate.Equals(value) = false) Then
				Me.OnInventoryDateChanging(value)
				Me.SendPropertyChanging
				Me._InventoryDate = value
				Me.SendPropertyChanged("InventoryDate")
				Me.OnInventoryDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InventoryItemID", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property InventoryItemID() As System.Nullable(Of Integer)
		Get
			Return Me._InventoryItemID
		End Get
		Set
			If (Me._InventoryItemID.Equals(value) = false) Then
				If Me._tblItem.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnInventoryItemIDChanging(value)
				Me.SendPropertyChanging
				Me._InventoryItemID = value
				Me.SendPropertyChanged("InventoryItemID")
				Me.OnInventoryItemIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InventoryQuantity", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property InventoryQuantity() As System.Nullable(Of Integer)
		Get
			Return Me._InventoryQuantity
		End Get
		Set
			If (Me._InventoryQuantity.Equals(value) = false) Then
				Me.OnInventoryQuantityChanging(value)
				Me.SendPropertyChanging
				Me._InventoryQuantity = value
				Me.SendPropertyChanged("InventoryQuantity")
				Me.OnInventoryQuantityChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InventoryPallets", DbType:="Real", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property InventoryPallets() As System.Nullable(Of Single)
		Get
			Return Me._InventoryPallets
		End Get
		Set
			If (Me._InventoryPallets.Equals(value) = false) Then
				Me.OnInventoryPalletsChanging(value)
				Me.SendPropertyChanging
				Me._InventoryPallets = value
				Me.SendPropertyChanged("InventoryPallets")
				Me.OnInventoryPalletsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_strEnteredBy", DbType:="NVarChar(50)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property strEnteredBy() As String
		Get
			Return Me._strEnteredBy
		End Get
		Set
			If (String.Equals(Me._strEnteredBy, value) = false) Then
				Me.OnstrEnteredByChanging(value)
				Me.SendPropertyChanging
				Me._strEnteredBy = value
				Me.SendPropertyChanged("strEnteredBy")
				Me.OnstrEnteredByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dtmEnteredOn", DbType:="DateTime", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property dtmEnteredOn() As System.Nullable(Of Date)
		Get
			Return Me._dtmEnteredOn
		End Get
		Set
			If (Me._dtmEnteredOn.Equals(value) = false) Then
				Me.OndtmEnteredOnChanging(value)
				Me.SendPropertyChanging
				Me._dtmEnteredOn = value
				Me.SendPropertyChanged("dtmEnteredOn")
				Me.OndtmEnteredOnChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ts", AutoSync:=AutoSync.Always, DbType:="rowversion", IsDbGenerated:=true, IsVersion:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ts() As System.Data.Linq.Binary
		Get
			Return Me._ts
		End Get
		Set
			If (Object.Equals(Me._ts, value) = false) Then
				Me.OntsChanging(value)
				Me.SendPropertyChanging
				Me._ts = value
				Me.SendPropertyChanged("ts")
				Me.OntsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PO", DbType:="VarChar(50)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property PO() As String
		Get
			Return Me._PO
		End Get
		Set
			If (String.Equals(Me._PO, value) = false) Then
				Me.OnPOChanging(value)
				Me.SendPropertyChanging
				Me._PO = value
				Me.SendPropertyChanged("PO")
				Me.OnPOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Lot", DbType:="VarChar(50)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Lot() As String
		Get
			Return Me._Lot
		End Get
		Set
			If (String.Equals(Me._Lot, value) = false) Then
				Me.OnLotChanging(value)
				Me.SendPropertyChanging
				Me._Lot = value
				Me.SendPropertyChanged("Lot")
				Me.OnLotChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Shift", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Shift() As System.Nullable(Of Integer)
		Get
			Return Me._Shift
		End Get
		Set
			If (Me._Shift.Equals(value) = false) Then
				Me.OnShiftChanging(value)
				Me.SendPropertyChanging
				Me._Shift = value
				Me.SendPropertyChanged("Shift")
				Me.OnShiftChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Pallet", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Pallet() As System.Nullable(Of Integer)
		Get
			Return Me._Pallet
		End Get
		Set
			If (Me._Pallet.Equals(value) = false) Then
				Me.OnPalletChanging(value)
				Me.SendPropertyChanging
				Me._Pallet = value
				Me.SendPropertyChanged("Pallet")
				Me.OnPalletChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tblItem_tblInventory", Storage:="_tblItem", ThisKey:="InventoryItemID", OtherKey:="ItemID", IsForeignKey:=true)>  _
	Public Property tblItem() As tblItem
		Get
			Return Me._tblItem.Entity
		End Get
		Set
			Dim previousValue As tblItem = Me._tblItem.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._tblItem.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._tblItem.Entity = Nothing
					previousValue.tblInventories.Remove(Me)
				End If
				Me._tblItem.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.tblInventories.Add(Me)
					Me._InventoryItemID = value.ItemID
				Else
					Me._InventoryItemID = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("tblItem")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblItems")>  _
Partial Public Class tblItem
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ItemID As Integer
	
	Private _ItemCode As String
	
	Private _ItemDescription As String
	
	Private _ItemType As String
	
	Private _ItemCustomerID As System.Nullable(Of Integer)
	
	Private _ItemDefaultMachine As System.Nullable(Of Integer)
	
	Private _ItemProdStandard As System.Nullable(Of Double)
	
	Private _ItemPicture As System.Data.Linq.Binary
	
	Private _dblPrice As System.Nullable(Of Double)
	
	Private _sngRebate As System.Nullable(Of Single)
	
	Private _strUnitOfMeasure As String
	
	Private _intQtyPerUnit As System.Nullable(Of Double)
	
	Private _strEnteredBy As String
	
	Private _dtmEnteredOn As System.Nullable(Of Date)
	
	Private _dblFreight As System.Nullable(Of Double)
	
	Private _dblFilm As System.Nullable(Of Double)
	
	Private _dblBoxes As System.Nullable(Of Double)
	
	Private _dblStretchWrap As System.Nullable(Of Double)
	
	Private _dblPallets As System.Nullable(Of Double)
	
	Private _dblOther1 As System.Nullable(Of Double)
	
	Private _dblOther2 As System.Nullable(Of Double)
	
	Private _dblOther3 As System.Nullable(Of Double)
	
	Private _dblOther4 As System.Nullable(Of Double)
	
	Private _dblOther5 As System.Nullable(Of Double)
	
	Private _intUnitsPerCase As System.Nullable(Of Double)
	
	Private _intUnitsPerPallet As System.Nullable(Of Integer)
	
	Private _intCasesPerPallet As System.Nullable(Of Integer)
	
	Private _sngQuantityOnHand As System.Nullable(Of Single)
	
	Private _ts As System.Data.Linq.Binary
	
	Private _CaseGrossWeight As System.Nullable(Of Double)
	
	Private _PackageCode As String
	
	Private _CaseCode As String
	
	Private _RequiredWeight As String
	
	Private _MAV As String
	
	Private _CasesPerLayer As String
	
	Private _LayersPerPallet As String
	
	Private _ShelfLife As String
	
	Private _Instructions As String
	
	Private _PalletPattern As String
	
	Private _Inactive As System.Nullable(Of Boolean)
	
	Private _Editing As System.Nullable(Of Boolean)
	
	Private _Packers As System.Nullable(Of Double)
	
	Private _UPC As String
	
	Private _tblInventories As EntitySet(Of tblInventory)
	
	Private _tblBOMs As EntitySet(Of tblBOM)
	
	Private _tblBOMs1 As EntitySet(Of tblBOM)
	
	Private _LocationInventories As EntitySet(Of LocationInventory)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnItemIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnItemIDChanged()
    End Sub
    Partial Private Sub OnItemCodeChanging(value As String)
    End Sub
    Partial Private Sub OnItemCodeChanged()
    End Sub
    Partial Private Sub OnItemDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnItemDescriptionChanged()
    End Sub
    Partial Private Sub OnItemTypeChanging(value As String)
    End Sub
    Partial Private Sub OnItemTypeChanged()
    End Sub
    Partial Private Sub OnItemCustomerIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnItemCustomerIDChanged()
    End Sub
    Partial Private Sub OnItemDefaultMachineChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnItemDefaultMachineChanged()
    End Sub
    Partial Private Sub OnItemProdStandardChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnItemProdStandardChanged()
    End Sub
    Partial Private Sub OnItemPictureChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnItemPictureChanged()
    End Sub
    Partial Private Sub OndblPriceChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OndblPriceChanged()
    End Sub
    Partial Private Sub OnsngRebateChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub OnsngRebateChanged()
    End Sub
    Partial Private Sub OnstrUnitOfMeasureChanging(value As String)
    End Sub
    Partial Private Sub OnstrUnitOfMeasureChanged()
    End Sub
    Partial Private Sub OnintQtyPerUnitChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnintQtyPerUnitChanged()
    End Sub
    Partial Private Sub OnstrEnteredByChanging(value As String)
    End Sub
    Partial Private Sub OnstrEnteredByChanged()
    End Sub
    Partial Private Sub OndtmEnteredOnChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OndtmEnteredOnChanged()
    End Sub
    Partial Private Sub OndblFreightChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OndblFreightChanged()
    End Sub
    Partial Private Sub OndblFilmChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OndblFilmChanged()
    End Sub
    Partial Private Sub OndblBoxesChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OndblBoxesChanged()
    End Sub
    Partial Private Sub OndblStretchWrapChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OndblStretchWrapChanged()
    End Sub
    Partial Private Sub OndblPalletsChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OndblPalletsChanged()
    End Sub
    Partial Private Sub OndblOther1Changing(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OndblOther1Changed()
    End Sub
    Partial Private Sub OndblOther2Changing(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OndblOther2Changed()
    End Sub
    Partial Private Sub OndblOther3Changing(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OndblOther3Changed()
    End Sub
    Partial Private Sub OndblOther4Changing(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OndblOther4Changed()
    End Sub
    Partial Private Sub OndblOther5Changing(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OndblOther5Changed()
    End Sub
    Partial Private Sub OnintUnitsPerCaseChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnintUnitsPerCaseChanged()
    End Sub
    Partial Private Sub OnintUnitsPerPalletChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnintUnitsPerPalletChanged()
    End Sub
    Partial Private Sub OnintCasesPerPalletChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnintCasesPerPalletChanged()
    End Sub
    Partial Private Sub OnsngQuantityOnHandChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub OnsngQuantityOnHandChanged()
    End Sub
    Partial Private Sub OntsChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OntsChanged()
    End Sub
    Partial Private Sub OnCaseGrossWeightChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnCaseGrossWeightChanged()
    End Sub
    Partial Private Sub OnPackageCodeChanging(value As String)
    End Sub
    Partial Private Sub OnPackageCodeChanged()
    End Sub
    Partial Private Sub OnCaseCodeChanging(value As String)
    End Sub
    Partial Private Sub OnCaseCodeChanged()
    End Sub
    Partial Private Sub OnRequiredWeightChanging(value As String)
    End Sub
    Partial Private Sub OnRequiredWeightChanged()
    End Sub
    Partial Private Sub OnMAVChanging(value As String)
    End Sub
    Partial Private Sub OnMAVChanged()
    End Sub
    Partial Private Sub OnCasesPerLayerChanging(value As String)
    End Sub
    Partial Private Sub OnCasesPerLayerChanged()
    End Sub
    Partial Private Sub OnLayersPerPalletChanging(value As String)
    End Sub
    Partial Private Sub OnLayersPerPalletChanged()
    End Sub
    Partial Private Sub OnShelfLifeChanging(value As String)
    End Sub
    Partial Private Sub OnShelfLifeChanged()
    End Sub
    Partial Private Sub OnInstructionsChanging(value As String)
    End Sub
    Partial Private Sub OnInstructionsChanged()
    End Sub
    Partial Private Sub OnPalletPatternChanging(value As String)
    End Sub
    Partial Private Sub OnPalletPatternChanged()
    End Sub
    Partial Private Sub OnInactiveChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnInactiveChanged()
    End Sub
    Partial Private Sub OnEditingChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnEditingChanged()
    End Sub
    Partial Private Sub OnPackersChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnPackersChanged()
    End Sub
    Partial Private Sub OnUPCChanging(value As String)
    End Sub
    Partial Private Sub OnUPCChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._tblInventories = New EntitySet(Of tblInventory)(AddressOf Me.attach_tblInventories, AddressOf Me.detach_tblInventories)
		Me._tblBOMs = New EntitySet(Of tblBOM)(AddressOf Me.attach_tblBOMs, AddressOf Me.detach_tblBOMs)
		Me._tblBOMs1 = New EntitySet(Of tblBOM)(AddressOf Me.attach_tblBOMs1, AddressOf Me.detach_tblBOMs1)
		Me._LocationInventories = New EntitySet(Of LocationInventory)(AddressOf Me.attach_LocationInventories, AddressOf Me.detach_LocationInventories)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ItemID", DbType:="Int NOT NULL", IsPrimaryKey:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ItemID() As Integer
		Get
			Return Me._ItemID
		End Get
		Set
			If ((Me._ItemID = value)  _
						= false) Then
				Me.OnItemIDChanging(value)
				Me.SendPropertyChanging
				Me._ItemID = value
				Me.SendPropertyChanged("ItemID")
				Me.OnItemIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ItemCode", DbType:="NVarChar(50)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ItemCode() As String
		Get
			Return Me._ItemCode
		End Get
		Set
			If (String.Equals(Me._ItemCode, value) = false) Then
				Me.OnItemCodeChanging(value)
				Me.SendPropertyChanging
				Me._ItemCode = value
				Me.SendPropertyChanged("ItemCode")
				Me.OnItemCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ItemDescription", DbType:="NVarChar(MAX)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ItemDescription() As String
		Get
			Return Me._ItemDescription
		End Get
		Set
			If (String.Equals(Me._ItemDescription, value) = false) Then
				Me.OnItemDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._ItemDescription = value
				Me.SendPropertyChanged("ItemDescription")
				Me.OnItemDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ItemType", DbType:="NVarChar(50)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ItemType() As String
		Get
			Return Me._ItemType
		End Get
		Set
			If (String.Equals(Me._ItemType, value) = false) Then
				Me.OnItemTypeChanging(value)
				Me.SendPropertyChanging
				Me._ItemType = value
				Me.SendPropertyChanged("ItemType")
				Me.OnItemTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ItemCustomerID", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ItemCustomerID() As System.Nullable(Of Integer)
		Get
			Return Me._ItemCustomerID
		End Get
		Set
			If (Me._ItemCustomerID.Equals(value) = false) Then
				Me.OnItemCustomerIDChanging(value)
				Me.SendPropertyChanging
				Me._ItemCustomerID = value
				Me.SendPropertyChanged("ItemCustomerID")
				Me.OnItemCustomerIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ItemDefaultMachine", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ItemDefaultMachine() As System.Nullable(Of Integer)
		Get
			Return Me._ItemDefaultMachine
		End Get
		Set
			If (Me._ItemDefaultMachine.Equals(value) = false) Then
				Me.OnItemDefaultMachineChanging(value)
				Me.SendPropertyChanging
				Me._ItemDefaultMachine = value
				Me.SendPropertyChanged("ItemDefaultMachine")
				Me.OnItemDefaultMachineChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ItemProdStandard", DbType:="Float", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ItemProdStandard() As System.Nullable(Of Double)
		Get
			Return Me._ItemProdStandard
		End Get
		Set
			If (Me._ItemProdStandard.Equals(value) = false) Then
				Me.OnItemProdStandardChanging(value)
				Me.SendPropertyChanging
				Me._ItemProdStandard = value
				Me.SendPropertyChanged("ItemProdStandard")
				Me.OnItemProdStandardChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ItemPicture", DbType:="Image", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ItemPicture() As System.Data.Linq.Binary
		Get
			Return Me._ItemPicture
		End Get
		Set
			If (Object.Equals(Me._ItemPicture, value) = false) Then
				Me.OnItemPictureChanging(value)
				Me.SendPropertyChanging
				Me._ItemPicture = value
				Me.SendPropertyChanged("ItemPicture")
				Me.OnItemPictureChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dblPrice", DbType:="Float", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property dblPrice() As System.Nullable(Of Double)
		Get
			Return Me._dblPrice
		End Get
		Set
			If (Me._dblPrice.Equals(value) = false) Then
				Me.OndblPriceChanging(value)
				Me.SendPropertyChanging
				Me._dblPrice = value
				Me.SendPropertyChanged("dblPrice")
				Me.OndblPriceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sngRebate", DbType:="Real", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property sngRebate() As System.Nullable(Of Single)
		Get
			Return Me._sngRebate
		End Get
		Set
			If (Me._sngRebate.Equals(value) = false) Then
				Me.OnsngRebateChanging(value)
				Me.SendPropertyChanging
				Me._sngRebate = value
				Me.SendPropertyChanged("sngRebate")
				Me.OnsngRebateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_strUnitOfMeasure", DbType:="NVarChar(50)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property strUnitOfMeasure() As String
		Get
			Return Me._strUnitOfMeasure
		End Get
		Set
			If (String.Equals(Me._strUnitOfMeasure, value) = false) Then
				Me.OnstrUnitOfMeasureChanging(value)
				Me.SendPropertyChanging
				Me._strUnitOfMeasure = value
				Me.SendPropertyChanged("strUnitOfMeasure")
				Me.OnstrUnitOfMeasureChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_intQtyPerUnit", DbType:="Float", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property intQtyPerUnit() As System.Nullable(Of Double)
		Get
			Return Me._intQtyPerUnit
		End Get
		Set
			If (Me._intQtyPerUnit.Equals(value) = false) Then
				Me.OnintQtyPerUnitChanging(value)
				Me.SendPropertyChanging
				Me._intQtyPerUnit = value
				Me.SendPropertyChanged("intQtyPerUnit")
				Me.OnintQtyPerUnitChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_strEnteredBy", DbType:="NVarChar(50)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property strEnteredBy() As String
		Get
			Return Me._strEnteredBy
		End Get
		Set
			If (String.Equals(Me._strEnteredBy, value) = false) Then
				Me.OnstrEnteredByChanging(value)
				Me.SendPropertyChanging
				Me._strEnteredBy = value
				Me.SendPropertyChanged("strEnteredBy")
				Me.OnstrEnteredByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dtmEnteredOn", DbType:="DateTime", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property dtmEnteredOn() As System.Nullable(Of Date)
		Get
			Return Me._dtmEnteredOn
		End Get
		Set
			If (Me._dtmEnteredOn.Equals(value) = false) Then
				Me.OndtmEnteredOnChanging(value)
				Me.SendPropertyChanging
				Me._dtmEnteredOn = value
				Me.SendPropertyChanged("dtmEnteredOn")
				Me.OndtmEnteredOnChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dblFreight", DbType:="Float", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property dblFreight() As System.Nullable(Of Double)
		Get
			Return Me._dblFreight
		End Get
		Set
			If (Me._dblFreight.Equals(value) = false) Then
				Me.OndblFreightChanging(value)
				Me.SendPropertyChanging
				Me._dblFreight = value
				Me.SendPropertyChanged("dblFreight")
				Me.OndblFreightChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dblFilm", DbType:="Float", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property dblFilm() As System.Nullable(Of Double)
		Get
			Return Me._dblFilm
		End Get
		Set
			If (Me._dblFilm.Equals(value) = false) Then
				Me.OndblFilmChanging(value)
				Me.SendPropertyChanging
				Me._dblFilm = value
				Me.SendPropertyChanged("dblFilm")
				Me.OndblFilmChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dblBoxes", DbType:="Float", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property dblBoxes() As System.Nullable(Of Double)
		Get
			Return Me._dblBoxes
		End Get
		Set
			If (Me._dblBoxes.Equals(value) = false) Then
				Me.OndblBoxesChanging(value)
				Me.SendPropertyChanging
				Me._dblBoxes = value
				Me.SendPropertyChanged("dblBoxes")
				Me.OndblBoxesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dblStretchWrap", DbType:="Float", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property dblStretchWrap() As System.Nullable(Of Double)
		Get
			Return Me._dblStretchWrap
		End Get
		Set
			If (Me._dblStretchWrap.Equals(value) = false) Then
				Me.OndblStretchWrapChanging(value)
				Me.SendPropertyChanging
				Me._dblStretchWrap = value
				Me.SendPropertyChanged("dblStretchWrap")
				Me.OndblStretchWrapChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dblPallets", DbType:="Float", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property dblPallets() As System.Nullable(Of Double)
		Get
			Return Me._dblPallets
		End Get
		Set
			If (Me._dblPallets.Equals(value) = false) Then
				Me.OndblPalletsChanging(value)
				Me.SendPropertyChanging
				Me._dblPallets = value
				Me.SendPropertyChanged("dblPallets")
				Me.OndblPalletsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dblOther1", DbType:="Float", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property dblOther1() As System.Nullable(Of Double)
		Get
			Return Me._dblOther1
		End Get
		Set
			If (Me._dblOther1.Equals(value) = false) Then
				Me.OndblOther1Changing(value)
				Me.SendPropertyChanging
				Me._dblOther1 = value
				Me.SendPropertyChanged("dblOther1")
				Me.OndblOther1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dblOther2", DbType:="Float", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property dblOther2() As System.Nullable(Of Double)
		Get
			Return Me._dblOther2
		End Get
		Set
			If (Me._dblOther2.Equals(value) = false) Then
				Me.OndblOther2Changing(value)
				Me.SendPropertyChanging
				Me._dblOther2 = value
				Me.SendPropertyChanged("dblOther2")
				Me.OndblOther2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dblOther3", DbType:="Float", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property dblOther3() As System.Nullable(Of Double)
		Get
			Return Me._dblOther3
		End Get
		Set
			If (Me._dblOther3.Equals(value) = false) Then
				Me.OndblOther3Changing(value)
				Me.SendPropertyChanging
				Me._dblOther3 = value
				Me.SendPropertyChanged("dblOther3")
				Me.OndblOther3Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dblOther4", DbType:="Float", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property dblOther4() As System.Nullable(Of Double)
		Get
			Return Me._dblOther4
		End Get
		Set
			If (Me._dblOther4.Equals(value) = false) Then
				Me.OndblOther4Changing(value)
				Me.SendPropertyChanging
				Me._dblOther4 = value
				Me.SendPropertyChanged("dblOther4")
				Me.OndblOther4Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dblOther5", DbType:="Float", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property dblOther5() As System.Nullable(Of Double)
		Get
			Return Me._dblOther5
		End Get
		Set
			If (Me._dblOther5.Equals(value) = false) Then
				Me.OndblOther5Changing(value)
				Me.SendPropertyChanging
				Me._dblOther5 = value
				Me.SendPropertyChanged("dblOther5")
				Me.OndblOther5Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_intUnitsPerCase", DbType:="Float", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property intUnitsPerCase() As System.Nullable(Of Double)
		Get
			Return Me._intUnitsPerCase
		End Get
		Set
			If (Me._intUnitsPerCase.Equals(value) = false) Then
				Me.OnintUnitsPerCaseChanging(value)
				Me.SendPropertyChanging
				Me._intUnitsPerCase = value
				Me.SendPropertyChanged("intUnitsPerCase")
				Me.OnintUnitsPerCaseChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_intUnitsPerPallet", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property intUnitsPerPallet() As System.Nullable(Of Integer)
		Get
			Return Me._intUnitsPerPallet
		End Get
		Set
			If (Me._intUnitsPerPallet.Equals(value) = false) Then
				Me.OnintUnitsPerPalletChanging(value)
				Me.SendPropertyChanging
				Me._intUnitsPerPallet = value
				Me.SendPropertyChanged("intUnitsPerPallet")
				Me.OnintUnitsPerPalletChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_intCasesPerPallet", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property intCasesPerPallet() As System.Nullable(Of Integer)
		Get
			Return Me._intCasesPerPallet
		End Get
		Set
			If (Me._intCasesPerPallet.Equals(value) = false) Then
				Me.OnintCasesPerPalletChanging(value)
				Me.SendPropertyChanging
				Me._intCasesPerPallet = value
				Me.SendPropertyChanged("intCasesPerPallet")
				Me.OnintCasesPerPalletChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sngQuantityOnHand", DbType:="Real", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property sngQuantityOnHand() As System.Nullable(Of Single)
		Get
			Return Me._sngQuantityOnHand
		End Get
		Set
			If (Me._sngQuantityOnHand.Equals(value) = false) Then
				Me.OnsngQuantityOnHandChanging(value)
				Me.SendPropertyChanging
				Me._sngQuantityOnHand = value
				Me.SendPropertyChanged("sngQuantityOnHand")
				Me.OnsngQuantityOnHandChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ts", AutoSync:=AutoSync.Always, DbType:="rowversion", IsDbGenerated:=true, IsVersion:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ts() As System.Data.Linq.Binary
		Get
			Return Me._ts
		End Get
		Set
			If (Object.Equals(Me._ts, value) = false) Then
				Me.OntsChanging(value)
				Me.SendPropertyChanging
				Me._ts = value
				Me.SendPropertyChanged("ts")
				Me.OntsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CaseGrossWeight", DbType:="Float", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property CaseGrossWeight() As System.Nullable(Of Double)
		Get
			Return Me._CaseGrossWeight
		End Get
		Set
			If (Me._CaseGrossWeight.Equals(value) = false) Then
				Me.OnCaseGrossWeightChanging(value)
				Me.SendPropertyChanging
				Me._CaseGrossWeight = value
				Me.SendPropertyChanged("CaseGrossWeight")
				Me.OnCaseGrossWeightChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PackageCode", DbType:="VarChar(400)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property PackageCode() As String
		Get
			Return Me._PackageCode
		End Get
		Set
			If (String.Equals(Me._PackageCode, value) = false) Then
				Me.OnPackageCodeChanging(value)
				Me.SendPropertyChanging
				Me._PackageCode = value
				Me.SendPropertyChanged("PackageCode")
				Me.OnPackageCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CaseCode", DbType:="VarChar(400)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property CaseCode() As String
		Get
			Return Me._CaseCode
		End Get
		Set
			If (String.Equals(Me._CaseCode, value) = false) Then
				Me.OnCaseCodeChanging(value)
				Me.SendPropertyChanging
				Me._CaseCode = value
				Me.SendPropertyChanged("CaseCode")
				Me.OnCaseCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RequiredWeight", DbType:="VarChar(50)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property RequiredWeight() As String
		Get
			Return Me._RequiredWeight
		End Get
		Set
			If (String.Equals(Me._RequiredWeight, value) = false) Then
				Me.OnRequiredWeightChanging(value)
				Me.SendPropertyChanging
				Me._RequiredWeight = value
				Me.SendPropertyChanged("RequiredWeight")
				Me.OnRequiredWeightChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MAV", DbType:="VarChar(50)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property MAV() As String
		Get
			Return Me._MAV
		End Get
		Set
			If (String.Equals(Me._MAV, value) = false) Then
				Me.OnMAVChanging(value)
				Me.SendPropertyChanging
				Me._MAV = value
				Me.SendPropertyChanged("MAV")
				Me.OnMAVChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CasesPerLayer", DbType:="VarChar(50)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property CasesPerLayer() As String
		Get
			Return Me._CasesPerLayer
		End Get
		Set
			If (String.Equals(Me._CasesPerLayer, value) = false) Then
				Me.OnCasesPerLayerChanging(value)
				Me.SendPropertyChanging
				Me._CasesPerLayer = value
				Me.SendPropertyChanged("CasesPerLayer")
				Me.OnCasesPerLayerChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LayersPerPallet", DbType:="VarChar(50)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property LayersPerPallet() As String
		Get
			Return Me._LayersPerPallet
		End Get
		Set
			If (String.Equals(Me._LayersPerPallet, value) = false) Then
				Me.OnLayersPerPalletChanging(value)
				Me.SendPropertyChanging
				Me._LayersPerPallet = value
				Me.SendPropertyChanged("LayersPerPallet")
				Me.OnLayersPerPalletChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ShelfLife", DbType:="VarChar(50)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ShelfLife() As String
		Get
			Return Me._ShelfLife
		End Get
		Set
			If (String.Equals(Me._ShelfLife, value) = false) Then
				Me.OnShelfLifeChanging(value)
				Me.SendPropertyChanging
				Me._ShelfLife = value
				Me.SendPropertyChanged("ShelfLife")
				Me.OnShelfLifeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Instructions", DbType:="VarChar(400)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Instructions() As String
		Get
			Return Me._Instructions
		End Get
		Set
			If (String.Equals(Me._Instructions, value) = false) Then
				Me.OnInstructionsChanging(value)
				Me.SendPropertyChanging
				Me._Instructions = value
				Me.SendPropertyChanged("Instructions")
				Me.OnInstructionsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PalletPattern", DbType:="VarChar(150)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property PalletPattern() As String
		Get
			Return Me._PalletPattern
		End Get
		Set
			If (String.Equals(Me._PalletPattern, value) = false) Then
				Me.OnPalletPatternChanging(value)
				Me.SendPropertyChanging
				Me._PalletPattern = value
				Me.SendPropertyChanged("PalletPattern")
				Me.OnPalletPatternChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Inactive", DbType:="Bit", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Inactive() As System.Nullable(Of Boolean)
		Get
			Return Me._Inactive
		End Get
		Set
			If (Me._Inactive.Equals(value) = false) Then
				Me.OnInactiveChanging(value)
				Me.SendPropertyChanging
				Me._Inactive = value
				Me.SendPropertyChanged("Inactive")
				Me.OnInactiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Editing", DbType:="Bit", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Editing() As System.Nullable(Of Boolean)
		Get
			Return Me._Editing
		End Get
		Set
			If (Me._Editing.Equals(value) = false) Then
				Me.OnEditingChanging(value)
				Me.SendPropertyChanging
				Me._Editing = value
				Me.SendPropertyChanged("Editing")
				Me.OnEditingChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Packers", DbType:="Float", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Packers() As System.Nullable(Of Double)
		Get
			Return Me._Packers
		End Get
		Set
			If (Me._Packers.Equals(value) = false) Then
				Me.OnPackersChanging(value)
				Me.SendPropertyChanging
				Me._Packers = value
				Me.SendPropertyChanged("Packers")
				Me.OnPackersChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UPC", DbType:="NVarChar(50)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property UPC() As String
		Get
			Return Me._UPC
		End Get
		Set
			If (String.Equals(Me._UPC, value) = false) Then
				Me.OnUPCChanging(value)
				Me.SendPropertyChanging
				Me._UPC = value
				Me.SendPropertyChanged("UPC")
				Me.OnUPCChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tblItem_tblInventory", Storage:="_tblInventories", ThisKey:="ItemID", OtherKey:="InventoryItemID")>  _
	Public Property tblInventories() As EntitySet(Of tblInventory)
		Get
			Return Me._tblInventories
		End Get
		Set
			Me._tblInventories.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tblItem_tblBOM", Storage:="_tblBOMs", ThisKey:="ItemID", OtherKey:="BOMFiniGoodID")>  _
	Public Property tblBOMs() As EntitySet(Of tblBOM)
		Get
			Return Me._tblBOMs
		End Get
		Set
			Me._tblBOMs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tblItem_tblBOM1", Storage:="_tblBOMs1", ThisKey:="ItemID", OtherKey:="BOMRawMatID")>  _
	Public Property tblBOMs1() As EntitySet(Of tblBOM)
		Get
			Return Me._tblBOMs1
		End Get
		Set
			Me._tblBOMs1.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tblItem_LocationInventory", Storage:="_LocationInventories", ThisKey:="ItemID", OtherKey:="LocationInvenoryItem")>  _
	Public Property LocationInventories() As EntitySet(Of LocationInventory)
		Get
			Return Me._LocationInventories
		End Get
		Set
			Me._LocationInventories.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_tblInventories(ByVal entity As tblInventory)
		Me.SendPropertyChanging
		entity.tblItem = Me
	End Sub
	
	Private Sub detach_tblInventories(ByVal entity As tblInventory)
		Me.SendPropertyChanging
		entity.tblItem = Nothing
	End Sub
	
	Private Sub attach_tblBOMs(ByVal entity As tblBOM)
		Me.SendPropertyChanging
		entity.tblItem = Me
	End Sub
	
	Private Sub detach_tblBOMs(ByVal entity As tblBOM)
		Me.SendPropertyChanging
		entity.tblItem = Nothing
	End Sub
	
	Private Sub attach_tblBOMs1(ByVal entity As tblBOM)
		Me.SendPropertyChanging
		entity.tblItem1 = Me
	End Sub
	
	Private Sub detach_tblBOMs1(ByVal entity As tblBOM)
		Me.SendPropertyChanging
		entity.tblItem1 = Nothing
	End Sub
	
	Private Sub attach_LocationInventories(ByVal entity As LocationInventory)
		Me.SendPropertyChanging
		entity.tblItem = Me
	End Sub
	
	Private Sub detach_LocationInventories(ByVal entity As LocationInventory)
		Me.SendPropertyChanging
		entity.tblItem = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblBOMs")>  _
Partial Public Class tblBOM
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _BOMID As Integer
	
	Private _BOMRawMatID As System.Nullable(Of Integer)
	
	Private _BOMFiniGoodID As System.Nullable(Of Integer)
	
	Private _BOMQuantity As System.Nullable(Of Single)
	
	Private _ts As System.Data.Linq.Binary
	
	Private _ScrapFactor As System.Nullable(Of Double)
	
	Private _IsPool As System.Nullable(Of Boolean)
	
	Private _tblItem As EntityRef(Of tblItem)
	
	Private _tblItem1 As EntityRef(Of tblItem)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnBOMIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnBOMIDChanged()
    End Sub
    Partial Private Sub OnBOMRawMatIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnBOMRawMatIDChanged()
    End Sub
    Partial Private Sub OnBOMFiniGoodIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnBOMFiniGoodIDChanged()
    End Sub
    Partial Private Sub OnBOMQuantityChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub OnBOMQuantityChanged()
    End Sub
    Partial Private Sub OntsChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OntsChanged()
    End Sub
    Partial Private Sub OnScrapFactorChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnScrapFactorChanged()
    End Sub
    Partial Private Sub OnIsPoolChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsPoolChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._tblItem = CType(Nothing, EntityRef(Of tblItem))
		Me._tblItem1 = CType(Nothing, EntityRef(Of tblItem))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BOMID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property BOMID() As Integer
		Get
			Return Me._BOMID
		End Get
		Set
			If ((Me._BOMID = value)  _
						= false) Then
				Me.OnBOMIDChanging(value)
				Me.SendPropertyChanging
				Me._BOMID = value
				Me.SendPropertyChanged("BOMID")
				Me.OnBOMIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BOMRawMatID", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property BOMRawMatID() As System.Nullable(Of Integer)
		Get
			Return Me._BOMRawMatID
		End Get
		Set
			If (Me._BOMRawMatID.Equals(value) = false) Then
				If Me._tblItem1.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnBOMRawMatIDChanging(value)
				Me.SendPropertyChanging
				Me._BOMRawMatID = value
				Me.SendPropertyChanged("BOMRawMatID")
				Me.OnBOMRawMatIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BOMFiniGoodID", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property BOMFiniGoodID() As System.Nullable(Of Integer)
		Get
			Return Me._BOMFiniGoodID
		End Get
		Set
			If (Me._BOMFiniGoodID.Equals(value) = false) Then
				If Me._tblItem.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnBOMFiniGoodIDChanging(value)
				Me.SendPropertyChanging
				Me._BOMFiniGoodID = value
				Me.SendPropertyChanged("BOMFiniGoodID")
				Me.OnBOMFiniGoodIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BOMQuantity", DbType:="Real", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property BOMQuantity() As System.Nullable(Of Single)
		Get
			Return Me._BOMQuantity
		End Get
		Set
			If (Me._BOMQuantity.Equals(value) = false) Then
				Me.OnBOMQuantityChanging(value)
				Me.SendPropertyChanging
				Me._BOMQuantity = value
				Me.SendPropertyChanged("BOMQuantity")
				Me.OnBOMQuantityChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ts", AutoSync:=AutoSync.Always, DbType:="rowversion", IsDbGenerated:=true, IsVersion:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ts() As System.Data.Linq.Binary
		Get
			Return Me._ts
		End Get
		Set
			If (Object.Equals(Me._ts, value) = false) Then
				Me.OntsChanging(value)
				Me.SendPropertyChanging
				Me._ts = value
				Me.SendPropertyChanged("ts")
				Me.OntsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ScrapFactor", DbType:="Float", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ScrapFactor() As System.Nullable(Of Double)
		Get
			Return Me._ScrapFactor
		End Get
		Set
			If (Me._ScrapFactor.Equals(value) = false) Then
				Me.OnScrapFactorChanging(value)
				Me.SendPropertyChanging
				Me._ScrapFactor = value
				Me.SendPropertyChanged("ScrapFactor")
				Me.OnScrapFactorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsPool", DbType:="Bit", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property IsPool() As System.Nullable(Of Boolean)
		Get
			Return Me._IsPool
		End Get
		Set
			If (Me._IsPool.Equals(value) = false) Then
				Me.OnIsPoolChanging(value)
				Me.SendPropertyChanging
				Me._IsPool = value
				Me.SendPropertyChanged("IsPool")
				Me.OnIsPoolChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tblItem_tblBOM", Storage:="_tblItem", ThisKey:="BOMFiniGoodID", OtherKey:="ItemID", IsForeignKey:=true)>  _
	Public Property tblItem() As tblItem
		Get
			Return Me._tblItem.Entity
		End Get
		Set
			Dim previousValue As tblItem = Me._tblItem.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._tblItem.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._tblItem.Entity = Nothing
					previousValue.tblBOMs.Remove(Me)
				End If
				Me._tblItem.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.tblBOMs.Add(Me)
					Me._BOMFiniGoodID = value.ItemID
				Else
					Me._BOMFiniGoodID = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("tblItem")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tblItem_tblBOM1", Storage:="_tblItem1", ThisKey:="BOMRawMatID", OtherKey:="ItemID", IsForeignKey:=true)>  _
	Public Property tblItem1() As tblItem
		Get
			Return Me._tblItem1.Entity
		End Get
		Set
			Dim previousValue As tblItem = Me._tblItem1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._tblItem1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._tblItem1.Entity = Nothing
					previousValue.tblBOMs1.Remove(Me)
				End If
				Me._tblItem1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.tblBOMs1.Add(Me)
					Me._BOMRawMatID = value.ItemID
				Else
					Me._BOMRawMatID = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("tblItem1")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.LocationInventory")>  _
Partial Public Class LocationInventory
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _OID As Integer
	
	Private _Location As System.Nullable(Of Integer)
	
	Private _LocationInvenoryItem As System.Nullable(Of Integer)
	
	Private _QuantityOnHand As System.Nullable(Of Double)
	
	Private _OptimisticLockField As System.Nullable(Of Integer)
	
	Private _GCRecord As System.Nullable(Of Integer)
	
	Private _tblItem As EntityRef(Of tblItem)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnOIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnOIDChanged()
    End Sub
    Partial Private Sub OnLocationChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnLocationChanged()
    End Sub
    Partial Private Sub OnLocationInvenoryItemChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnLocationInvenoryItemChanged()
    End Sub
    Partial Private Sub OnQuantityOnHandChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnQuantityOnHandChanged()
    End Sub
    Partial Private Sub OnOptimisticLockFieldChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnOptimisticLockFieldChanged()
    End Sub
    Partial Private Sub OnGCRecordChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnGCRecordChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._tblItem = CType(Nothing, EntityRef(Of tblItem))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property OID() As Integer
		Get
			Return Me._OID
		End Get
		Set
			If ((Me._OID = value)  _
						= false) Then
				Me.OnOIDChanging(value)
				Me.SendPropertyChanging
				Me._OID = value
				Me.SendPropertyChanged("OID")
				Me.OnOIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Location", DbType:="Int")>  _
	Public Property Location() As System.Nullable(Of Integer)
		Get
			Return Me._Location
		End Get
		Set
			If (Me._Location.Equals(value) = false) Then
				Me.OnLocationChanging(value)
				Me.SendPropertyChanging
				Me._Location = value
				Me.SendPropertyChanged("Location")
				Me.OnLocationChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LocationInvenoryItem", DbType:="Int")>  _
	Public Property LocationInvenoryItem() As System.Nullable(Of Integer)
		Get
			Return Me._LocationInvenoryItem
		End Get
		Set
			If (Me._LocationInvenoryItem.Equals(value) = false) Then
				If Me._tblItem.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnLocationInvenoryItemChanging(value)
				Me.SendPropertyChanging
				Me._LocationInvenoryItem = value
				Me.SendPropertyChanged("LocationInvenoryItem")
				Me.OnLocationInvenoryItemChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_QuantityOnHand", DbType:="Float")>  _
	Public Property QuantityOnHand() As System.Nullable(Of Double)
		Get
			Return Me._QuantityOnHand
		End Get
		Set
			If (Me._QuantityOnHand.Equals(value) = false) Then
				Me.OnQuantityOnHandChanging(value)
				Me.SendPropertyChanging
				Me._QuantityOnHand = value
				Me.SendPropertyChanged("QuantityOnHand")
				Me.OnQuantityOnHandChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OptimisticLockField", DbType:="Int")>  _
	Public Property OptimisticLockField() As System.Nullable(Of Integer)
		Get
			Return Me._OptimisticLockField
		End Get
		Set
			If (Me._OptimisticLockField.Equals(value) = false) Then
				Me.OnOptimisticLockFieldChanging(value)
				Me.SendPropertyChanging
				Me._OptimisticLockField = value
				Me.SendPropertyChanged("OptimisticLockField")
				Me.OnOptimisticLockFieldChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GCRecord", DbType:="Int")>  _
	Public Property GCRecord() As System.Nullable(Of Integer)
		Get
			Return Me._GCRecord
		End Get
		Set
			If (Me._GCRecord.Equals(value) = false) Then
				Me.OnGCRecordChanging(value)
				Me.SendPropertyChanging
				Me._GCRecord = value
				Me.SendPropertyChanged("GCRecord")
				Me.OnGCRecordChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tblItem_LocationInventory", Storage:="_tblItem", ThisKey:="LocationInvenoryItem", OtherKey:="ItemID", IsForeignKey:=true)>  _
	Public Property tblItem() As tblItem
		Get
			Return Me._tblItem.Entity
		End Get
		Set
			Dim previousValue As tblItem = Me._tblItem.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._tblItem.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._tblItem.Entity = Nothing
					previousValue.LocationInventories.Remove(Me)
				End If
				Me._tblItem.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.LocationInventories.Add(Me)
					Me._LocationInvenoryItem = value.ItemID
				Else
					Me._LocationInvenoryItem = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("tblItem")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class
